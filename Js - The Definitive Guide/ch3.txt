	ch.3
Types, values, and variables


Js has two types: primitive type and object type
primitive: strings, boolean, null, undefined
object: properties, functions,

"constructors" - functions written to make new object 

JS has also mutable and immutable types (whether they can be edited or not).
- String is immutable!

Varibales are declared with "var"
Js variables are untyped

var outside functinos -> global variable
var within functions -> have function scope

-------
3.1 Numbers

All numbers are 64 bit floting-point value AKA between -2^53 to 2^53
This raises a problem:
>>var x = 0.3 - 0.2
>>var y = 0.2 - 0.1
>>x == y // return false 

With addition to base 10 numbers, js also accept base-16 numbers
(0-9 and A-F)
-> call it with "0x" or "0X"
ex. 0xff // 15*16 + 15-> 255

base-8 numbers are called by "0"
ex. 0377 // 3*64 + 7*8 + 7 = 255

"Math" object provide powerful mathmatical tools
ex. Math.round(0.6) -> 1.0
       Math.max(x,y,z) // return the highest number 

"Infinity" and "-Infinity" exists!
0/0 or inifinity / 0 will produce NaN - Not a Number

To check for NaN:
-x != x will produce true if and only if x is NaN
-.isNaN() 

Setting the date:
>> var now = new Date( 2010, 0, 1, 17, 10, 30)
	-> 1st day of the 1st month in 2010 at 5:10:30 pm
>> var.getFullYear()
>> var.Day()
>> var.toString()

-----------------
3.2 Text

String can be made by both ' ' or " "
' ' can be put inside " ", and vice versa
ex. 'name = "MyForm" '

When incorporating Js with HTML, the best practice is to decide and 
follow which quotation to use for which
This is because HTML can contain Js code in some cases:
ex. <button onclick="alert('Thank you')"> </button>

Escape sequence 
 --> used to show the charc otherwise unshowable 
ex. 'You/'re right!'
/x__ --> greek word where _ are hex digits
/n -> new line (used when parsing)

Strings
"You can" + " add strings together" + " by '+' sign"
s.length, s.slice(1,3), etc
*String are immutable!
==> .toUppercase() returns a new string 
--> s.charAt(#)   returns a char at that index

RegExps = Regular Expressions 
* often regrexp literals are put in between /'s 
var text = "testing: 1, 2, 3"
var pattern = /\d+/g  		//matched instances of one+ digits
text.search(pattern)     	// => 9 (position of first match

Boolean
undefined, null, 0, -0, NaN, "" => all considered as "false" 
all over objects are considred "true" when compared
They have .toString() method!

---------------
3.4 Null and undefined 
null -> indicate the absence of a value
null.typeof => Object

undefined -> also indicate the absence of a value, but deeper
undefined.typeof => undefined 

*can often be used interchangeably
null == undefined => true

----------------
3.6 Wrapper Object
var N = new Number(n)

-----
var x = {x:1}, y = {x:1}
x == y // false

------
3.8 Type Conversions
10 + " Object"  	=> "10 Object" //converted to string 
"4" * "7" 		=> 28 	// converted to int
"one" * "3"		=> NaN
conversion to numbers are bit tricky

Explicit conversions 
Number("2") 	=> 2
Boolean([])	=> true
String(null) 	=> TypeError

Type comversion works on comparison!
Following all return true:
 "0" == false
0 == false
"0" == 0
"0" == false

toString() allows you to convert whateva in base form!
var x = 17
x.toString() => "10001"

Rounding numbers!
toFixed() convers # with # of decimals you specify
toExponential() converts a num to String w/ e way
toPrecision() shows as many decimals as you want
var x = 123456.789
x.toFixed() 		123456
x.toFixed(1) 		123456.7
x.toExponential(1)		1.2e+5
x.toPrecision(10)		123456.789

.parseInt() and .parseFloat() converts string in hexadominal format / 
notmal string into a # with unrelated part left out!
parseInt("5 chicken wings") 		5
parseInt("-12.3")			-12
parseInt("0xff")			255
parseFloat("He left 3.14 pie")		NaN
parseFloat("3.14 was his num")		3.14


var now = Date();
typeof ( now + 1) -> String 		+ converts to string
typeof (now -1 ) -> number		- converts to num

---------
3.9 Variable Declaration 

multipl declaration 
var i, sum, eh		; values are undefined
var i = 0, sum = 1, eh = "canada"	

----------
3.10 Variable Scope

var scope = "global"
function checkscope() {
   var scope = "local";		// sometimes called "shadow variable" of scope
   return scope;
}
checkscope() 	==> "local"

BUT

var scope = "global"
function checkscope() {
   scope = "local";
   return scope;
}
return scope	=> "local"

*when you wanna use the same name for local var, use "var"

Js have a FUNCTION SCOPE!!!
"all variables declared within a function are visible throughout the function!
=> throughout as in even before it is defined!

var scope = "global"
function checkscope() {
   console.log(scope)		// return undefined!
   scope = "local"
   console.log(scope) 		// return "local"
}

wait wut?
=> Good read (https://github.com/getify/You-Dont-Know-JS/blob/master/scope%20&%20closures/ch3.md)

global variables declared w/ var CAN NOT BE DELETED or nonconfigurable
variables can be created w/out "var"
variables defined this way is configurable

var num = 1;
fakevar = 2;
delete num 	// false
delete fakevar	// true 

scope chain?
First, understand lexical scoping 
"in JavaScript, the scope of a 
variable is defined by its location within the source code 
(it is apparent lexically) and nested functions have access to variables 
declared in their outer scope."
ex: 
function init() {
     var name = "Mozilla";                // name is a local variable created by init
     function displayName() {        // displayName() is the inner function, a closure
            alert(name);                          // use variable declared in the parent function    
     }
     displayName();    
};
init();

Wait, step back and let's learn function declaration
https://stackoverflow.com/questions/336859/var-functionname-function-vs-function-functionname
There are:
1 Function Declaration
2. "Anonymous" function Expression 
3. Names function Expression
4. Accessor Function Initializer
5. Arrow Function Expression
6. Constructor and Method Declaration

So you can understand closures!
https://stackoverflow.com/questions/111102/how-do-javascript-closures-work
"In JavaScript, if you use the function keyword inside
 another function, you are creating a closure."
// note: read more answers cuz you're not getting closures
// you need to get clusures before getting scope chain









